#!/usr/bin/env python3

#
# Disclaimer: This script is experimental. Changes may come any time.
#

import click
import math
import json
import sys
from datetime import datetime
from pathlib import Path

from circonusapi import circonusdata

@click.group()
@click.option("-e", "--endpoint", default=None)
@click.option("-a", "--account", default=None)
@click.option("-t", "--token", default=None)
@click.option("-c", "--config", default=None)
@click.pass_context
def cli(ctx, endpoint, account, token, config):
    if config:
        with open(Path("~/.caqlrc").expanduser(), "r") as fh:
            cfg = json.load(fh)[config]
            ctx.obj["endpoint"] = cfg.get("endpoint")
            ctx.obj["account"] = cfg.get("account")
            ctx.obj["token"] = cfg.get("token")
    else:
        ctx.obj["endpoint"] = endpoint
        ctx.obj["account"] = account
        ctx.obj["token"] = token

@cli.command()
@click.option("-q", "--query", required=True)
@click.option("-s", "--start")
@click.option("-p", "--period", type=float, default = 60)
@click.option("-n", "--count", type=int, default = 10)
@click.option("--explain", type=bool, default = False)
@click.pass_context
def fetch(ctx, query, start, period, count, explain):
    start = start or ( math.floor(datetime.now().timestamp() / period) * period - period * count )
    circ = circonusdata.CirconusData(ctx.obj["token"], ctx.obj["endpoint"], ctx.obj["account"])
    json.dump(
        circ.caql(query, start, period, count, convert_hists = False, explain = explain),
        sys.stdout
    )


@cli.command()
@click.option("-q", "--query", required=True)
@click.option("-s", "--start")
@click.option("-p", "--period", type=float, default = 60)
@click.option("-n", "--count", type=int, default = 10)
@click.pass_context
def explain(ctx, query, start, period, count):
    start = start or ( math.floor(datetime.now().timestamp() / period) * period - period * count )
    circ = circonusdata.CirconusData(ctx.obj["token"], ctx.obj["endpoint"], ctx.obj["account"])
    resp =  circ.caql(query, start, period, count, explain=True, convert_hists=False)
    explain = resp["head"]["explain"]
    duration_total = explain["info"]["stats"]["duration"]
    duration_width = 50

    def visit(n, level):
        info = n['info']
        fetch = info["stats"]["fetch"]
        duration = info["stats"]["duration"]
        sign = "".join([ info["name"] , 
                     "(", # args
                     ",".join(info.get("args", "")),
                     ",", # kwargs
                     "".join([ str(k) + "=" + str(v) for k,v in dict(info.get("kwargs", {})).items()]), 
                     ")" ])
        prefix = "  " * (level) + " | "
        print( "  " * (level) + " +")
        print( prefix, sign , ": {} => {}".format(info['putype'][0], info['putype'][1]) )
        print( prefix )
        print( prefix, "{} x {} samples @ {} period".format(info['stats']['width'], fetch[2], fetch[1]))
        print( prefix, "took {:.6f}s".format(duration), "."*int(duration / duration_total * duration_width) )
        print( "  " * (level) + " + ")

    def walk(n, level = 0):
        visit(n, level)
        for c in n['child']:
            walk(c, level + 1)

    print("# CAQL Explain\n\n> ", resp["head"]["query"].strip(), "\n")
    print("start = {}, period = {}, count = {}".format(*explain["info"]["stats"]["fetch"]))
    print()
    walk(explain, 0)

if __name__ == "__main__":
    cli(obj={})

# Local Variables:
# mode: python
# End:
